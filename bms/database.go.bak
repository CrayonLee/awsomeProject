package main

import (
	"database/sql"
	"fmt"
	"strconv"

	_ "github.com/go-sql-driver/mysql"
)

//定义一个全局对象db
var db *sql.DB




//定义一个初始化数据库的函数
func initDB()(err error){
	//DSN:Data Source Name
	 dsn:="root:lzh123456@tcp(39.102.112.15:3306)/bms?charset=utf8mb4&parseTime=True"
	 //不会校验账号密码是否正确
	 //注意！！！这里不要使用：=，哦我问你是给全局变量赋值，然后在main函数中使用全局变量db
	 db,err = sql.Open("mysql",dsn)
	 if err!=nil{
	 	return err
	 }
	 //尝试与数据库建立连接(校验dsn是否正确)
	 err=db.Ping()
	 if err!=nil{
	 	return err
	 }
	 return nil
}

//查询单挑数据示例
func queryOneRowDemo(){
	sqlStr:="select id,book_name,price from book where id = ?"
	var book book
	err:=db.QueryRow(sqlStr,1).Scan(&book.id,&book.bookName,&book.price)
	if err!=nil{
		fmt.Printf("query failed,err:%v\n",err)
		return
	}
	fmt.Printf("id:%d bookName:%s price:%.2f\n",book.id,book.bookName,book.price)
}

//查询多条数据示例
func queryMultiRowDemo(){
	sqlStr:="select id,book_name,price from book"
	rows, err := db.Query(sqlStr)
	if err!=nil{
		fmt.Printf("Scan failed,err:%v\n",err)
		return
	}
	//非常重要 释放数据库的连接
	defer rows.Close()

	//循环读取结果集中的数据
	for rows.Next(){
		var book book
		err := rows.Scan(&book.id, &book.bookName, &book.price)
		if err!=nil{
			fmt.Printf("Scan failed,err:%v\n",err)
			return
		}
		fmt.Printf("id:%d bookName:%s price:%.2f\n",book.id,book.bookName,book.price)
	}
}

//插入数据
func insertRowDemo()  {
	sqlStr:="insert into book(book_name,price) values(?,?)"
	price, err := strconv.ParseFloat("28.02", 64)
	if err!=nil{
		fmt.Printf("convet failed,err:%v\n",err)
		return
	}
	ret, err := db.Exec(sqlStr, "小王子", price)
	if err!=nil{
		fmt.Printf("insert failed,err:%v\n",err)
		return
	}
	id, err := ret.LastInsertId()
	if err!=nil{
		fmt.Printf("get last insert id failed,err:%v\n",err)
		return
	}
	fmt.Printf("insert success,the id is %d.\n",id)

}

//更新数据
func updateRowDemo(){
	sqlStr:="update book set book_name=? where id=?"
	ret, err := db.Exec(sqlStr, "小王子1",3)
	if err!=nil{
		fmt.Printf("update failed,err:%v\n",err)
		return
	}
	affected, err := ret.RowsAffected()
	if err!=nil{
		fmt.Printf("get rows affected failed,err:%v\n",err)
		return
	}
	fmt.Printf("update success,affected rows:%d\n",affected)
}

//删除数据
func deleteRowDemo(){
	sqlStr:="delete from book  where id=?"
	ret, err := db.Exec(sqlStr, 3)
	if err!=nil{
		fmt.Printf("delete failed,err:%v\n",err)
		return
	}
	affected, err := ret.RowsAffected()
	if err!=nil{
		fmt.Printf("delete rows affected failed,err:%v\n",err)
		return
	}
	fmt.Printf("delete success,affected rows:%d\n",affected)
}

func prepareQeryRowDemo(){
	sqlStr:="select id,book_name,price from book"
	stmt, err := db.Prepare(sqlStr)
	if err!=nil{
		fmt.Printf("Scan failed,err:%v\n",err)
		return
	}
	defer stmt.Close()
	rows, err := stmt.Query()
	if err!=nil{
		fmt.Printf("query failed,err:%v\n",err)
		return
	}
	//非常重要 释放数据库的连接
	defer rows.Close()

	//循环读取结果集中的数据
	for rows.Next(){
		var book book
		err := rows.Scan(&book.id, &book.bookName, &book.price)
		if err!=nil{
			fmt.Printf("Scan failed,err:%v\n",err)
			return
		}
		fmt.Printf("id:%d bookName:%s price:%.2f\n",book.id,book.bookName,book.price)
	}
}

func prepareInsertRowDemo(){
	sqlStr := "insert into book(book_name, price) values (?,?)"
	stmt, err := db.Prepare(sqlStr)
	if err != nil {
		fmt.Printf("prepare failed, err:%v\n", err)
		return
	}
	defer stmt.Close()
	float, _ := strconv.ParseFloat("18", 64)
	_, err = stmt.Exec("小王子", float)
	if err != nil {
		fmt.Printf("insert failed, err:%v\n", err)
		return
	}

	fmt.Println("insert success.")
}


//func main() {
//	err := initDB() // 调用输出化数据库的函数
//	if err != nil {
//		fmt.Printf("init db failed,err:%v\n", err)
//		return
//	}
//	prepareInsertRowDemo()
//}
